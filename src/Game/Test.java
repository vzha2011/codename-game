package Game;

import static org.junit.Assert.*;

import java.util.ArrayList;

import Main.Board;
import Main.Person;

public class Test {
	
/*Test if there are 25 locations instances when game starts
 * If size of ArrayList of location is equal to 25, then this test passes
 * @version 1.0.0
 * @2018-2-19
 * */
@org.junit.Test
	public void TestIfThereAre25Locations() {
		Board b=new Board();
		b.GameStart();
		assertEquals(25,b.getListofLocation().size(),0.001);
	}

/*Test if readFile() method read all words from GameWords.txt 
 * If size of the ArrayList of String that holds all of words from text file is equal to number of words in text file,
 * then this test passes
 * @version 1.0.0
 * @2018-2-19
 * */
@org.junit.Test

	public void testSize() {
	    Board b=new Board();
		ArrayList<String> testl=new ArrayList<>();
		b.readFile("src/Main/codenames.txt");	
		testl=b.getList();
	    assertEquals(450, testl.size());
	}
	

/*Test if readFile() method correctly read all of words from GameWords.txt
 * If size of the ArrayList of String that holds all words from text file is not equal to null,
 * then this test passes
 * @version 1.0.0
 * @2018-2-19
 * */
@org.junit.Test

	public void testNull() {
	   Board b=new Board();
		ArrayList<String> testl=new ArrayList<>();
		b.readFile("src/Main/codenames.txt");	
		testl=b.getList();
		assertNotNull(testl.size());
	}


/*Test if there are 25 Person instances(codenames) when game starts
 * If size of the ArrayList of Person generated by getRandomList(ArrayList<String> names) is 25,
 * then this test passes
 * @version 1.0.0
 * @2018-2-19
 * */
@org.junit.Test
	 public void testSize2() {
	    Board b=new Board();
	    b.GameStart();
		 ArrayList<String> testList=new ArrayList<>();
		 ArrayList<Person> randomList=new ArrayList<>();
		 for(int i=0;i<100;i++) {
			 testList.add(Integer.toString(i));
		 }
		 b.getRandomList(testList);
		 randomList=b.getlistof25CodeNames();
		 assertEquals(25,randomList.size()); 
	 }


/*Test if ArrayList of Person generated by getRandomList(ArrayList<String> names) is null
 * If ArrayList of Person generated by getRandomList(ArrayList<String> names) is not null,
 * then this test passes
 * @version 1.0.0
 * @2018-2-19
 * */	 
@org.junit.Test
	 public void testNull2() {
	    Board b=new Board();
	    b.GameStart();
		 ArrayList<String> testList=new ArrayList<>();
		 ArrayList<Person> randomList=new ArrayList<>();
		 for(int i=0;i<100;i++) {
			 testList.add(Integer.toString(i));
		 }
		 b.getRandomList(testList);
		 randomList=b.getlistof25CodeNames();
		 assertNotNull(randomList); 
	 }



/*Test if list of Identity (i.e:Red Agent) holds 9 Red Agent, 8 Blue Agents, 7 Innocent Bystanders, 1 Assassin
 * If GenerateListOfIdentity() generated correct amounts of Red Agent, Blue Agents, Innocent Bystanders, and Assassin,
 * the this test passes
 * @version 1.0.0
 * @2018-2-19
 * */	 	
@org.junit.Test

public void CheckIfListofIdentityIsCorrect() {
	Board b=new Board();
	b.GenerateListOfIdentity();
	int RedAgentCount=0;
	int BlueAgentCount=0;
	int InnocentBystanderCount=0;
	int AssassinCount=0;
	for(int i=0;i<b.getListofIdentity().size();i++) {
		if(b.getListofIdentity().get(i).equals("RedAgent")) {
			RedAgentCount++;
		}
	    if(b.getListofIdentity().get(i).equals("BlueAgent")) {
	    	    BlueAgentCount++;
	    }	
		if(b.getListofIdentity().get(i).equals("Assassin")) {
			AssassinCount++;
		}
		if(b.getListofIdentity().get(i).equals("InnocentBystander")){
			InnocentBystanderCount++;
		}
	}
	System.out.print(BlueAgentCount);
	assertEquals(9,RedAgentCount,0.001);
	assertEquals(8,BlueAgentCount,0.001);
	assertEquals(7,InnocentBystanderCount,0.001);
	assertEquals(1,AssassinCount,0.001);
}

/*Test if list of Identity (i.e: Red Agent) is randomly generated
 * If the order of Identity in ArrayList<String> identity which is generated GenerateListOfIdentity() is different each time,
 * then this test passes
 * (this test may fail because the order of Assassin may be repeated)
 * @version 1.0.0
 * @2018-2-19
 * */
@org.junit.Test
public void CheckIfIdentityIsRandomlySelected() {
	Board b=new Board();
	b.GenerateListOfIdentity();
	int index=0;
	int index2=0;
	for(int i=0;i<b.getListofIdentity().size();i++) {
		if(b.getListofIdentity().get(i).equals("Assassin")) {
			index=i;
		}
	}
	b.GenerateListOfIdentity();
	for(int i=0;i<b.getListofIdentity().size();i++) {
		if(b.getListofIdentity().get(i).equals("Assassin")) {
			index=i;
		}
	}
	assertNotSame(index,index2);	
}

/*Test if Red Team is always the first one to move when game starts
 * When it is Red Team's turn,the instance of currentteam is equal to 0
 * If getCurrentTeam return 0, then this test passes
 * @version 1.0.0
 * @2018-2-19
 * */
@org.junit.Test

public void CheckIfRedTeamMoveWhenGameStarts() {
	Board b=new Board();
	b.GameStart();
	assertEquals(0,b.getCurrentTeam(),0.001);
}

/*Test if each location is assigned with Person(codename) when game starts
 * If each Location instance holds a Person instance with a codename(i.e:sea) and identity(i.e:Red Agent) that is not revealed,
 * then this test passes
 * @version 1.0.0
 * @2018-2-19
 * */
@org.junit.Test

public void CheckIfEachLocationIsAssignedPersonWhenGameStarts() {
	Board b=new Board();
	b.GameStart();
	boolean result = true;
	for(int i=0;i<b.getListofLocation().size();i++) {
		if(!b.getListofLocation().get(i).getPersonfromLocation().getPersonName().equals("")||b.getListofLocation().get(i).getPersonfromLocation().getPersonName()!=null) {
			if(!b.getListofLocation().get(i).getPersonfromLocation().getIdentity().equals("")||b.getListofLocation().get(i).getPersonfromLocation().getIdentity()!=null) {
				if(!b.getListofLocation().get(i).getPersonfromLocation().CheckIfItIsRevealed()) {
					result=false;
				}
				else {result=true;}
			}
		}
		
	}
  assertFalse(result);
	
}


/*Test whether Clue is Legal or not
 * The instance of clue is assign with String value of "a", so CheckIfClueIsLegal() should return true because none of the String value stored in
 * ArrayList<Person> codenamelist is equal to "a".
 * @version 1.0.0
 * @2018-2-19
 * */
@org.junit.Test

public void CheckIfClueIsLegal() {
	Board b=new Board();
	b.GameStart();
	b.setClue("a");
	assertTrue(b.CheckIfClueIsLegal());		
}



/* Test if the count, number of location related to Clue is decremented if revealed after game starts
 * Assume the count is 2 and one location is revealed
 * CheckIfLocationContainsCurrentTeamAgent() will decrease the count to 1 if one 
 * if count is equal to 1, then this test passes
 * @version 1.0.0
 * @2018-2-19
 * */
@org.junit.Test

public void CheckIfaNumberOfLocationLeftIsDecrementedIfRevealed() {
	Board b=new Board();
	b.GameStart();
	b.setNumberOfLocationLeft(25);
	b.setLocationChosen(b.getListofLocation().get(0));
	b.getListofLocation().get(0).getPersonfromLocation().SetPersonRevealed();
	b.CheckIfLocationContainsCurrentTeamAgent();
	assertEquals(24,b.getNumberOfLocationLeft(),0.001);
}


/* Test if current Location contains current team's agent after game starts
 * 1)Assume it is Red Team's turn and current Location has Person's identity is Red Agent
 * Set the current Location revealed
 * 2)Assume it is Blue Team's turn and current Location has Person's identity is Red Agent
 * Set the current Location revealed
 * CheckIfLocationContainsCurrentTeamAgent() will return true if it's Red Team's turn and Current CodeName is Red Agent,same as Blue Team
 * CheckIfLocationContainsCurrentTeamAgent() will return false if it's Red Team's turn and Current CodeName is Blue Agent, or vice versa
 * If CheckIfLocationContainsCurrentTeamAgent() return true with 1)condition and 
 * CheckIfLocationContainsCurrentTeamAgent() return false with 2)condition, then this test passes
 * @version 1.0.3
 * @2018-2-20
 * */
@org.junit.Test

public void LocationContainsCurrentTeamAgentTest() {
	Board b=new Board();
	b.GameStart();
	for(int i=0;i<b.getListofLocation().size();i++) {
		if(b.getListofLocation().get(i).getPersonfromLocation().getIdentity().equals("RedAgent")) {
			b.setLocationChosen(b.getListofLocation().get(i));
			break;
		}
	}
	b.getLocationChosen().getPersonfromLocation().SetPersonRevealed();
	b.getRedTeam().add(b.getLocationChosen());	
	assertTrue(b.CheckIfLocationContainsCurrentTeamAgent());
	
	b.setCurrentTeam(1);
	for(int i=0;i<b.getListofLocation().size();i++) {
		if(b.getListofLocation().get(i).getPersonfromLocation().getIdentity().equals("RedAgent")) {
			b.setLocationChosen(b.getListofLocation().get(i));
			break;
		}
	}
	b.getBlueTeam().add(b.getLocationChosen());	
	assertFalse(b.CheckIfLocationContainsCurrentTeamAgent());
	
	b.setCurrentTeam(1);
	for(int i=0;i<b.getListofLocation().size();i++) {
		if(b.getListofLocation().get(i).getPersonfromLocation().getIdentity().equals("InnocentBystander")) {
			b.setLocationChosen(b.getListofLocation().get(i));
			break;
		}
	}
	b.getBlueTeam().add(b.getLocationChosen());	
	assertFalse(b.CheckIfLocationContainsCurrentTeamAgent());
	
	
}

/*Test if the Board is in one of the winning states
 * Assume the count of Red Agent is 9 and count of Blue Agent is 8 
 * If count of Red Agent is 9, Red Team wins, the Board is in one of the winning states
 * If count of Blue Agent is 8, Blue Team wins, the Board is in one of the winning states
 * If CheckWinningState() return true with the conditions above, then this test passes
 * @version 1.0.0
 * @2018-2-19
 * @author 
 * */
@org.junit.Test

public void CheckWinningStateTest1() {
	Board b=new Board();
	b.setRedAgentCount(9);
	assertTrue(b.CheckWinningState());
	b.setBlueAgentCount(8);
	assertTrue(b.CheckWinningState());
    	
}


/*Test if the Board is in one of the winning states
 * If Red Team got a Location revealed with Assassin, then Blue Team wins
 * If Blue Team got a Location revealed with Assassin, then Red Team wins
 * If CheckWinningState() return true with the conditions above, then this test passes
 * @version 1.0.0
 * @2018-2-19
 * */
@org.junit.Test

public void CheckWinningStateTest2() {
	Board b=new Board();
    b.GameStart();
	b.setCurrentTeam(0);
	for(int i=0;i<b.getListofLocation().size();i++) {
		if(b.getListofLocation().get(i).getPersonfromLocation().getIdentity().equals("Assassin")){
		   b.setLocationChosen(b.getListofLocation().get(i));
		}
	}
    assertTrue(b.CheckWinningState());
}
/*Test if the Board is in one of the winning states
 * If count of Red Agent is less than 9, count of Blue Agent is less than 8, and current team doesn't get Assassin revealed,
 * then Board is not in one of the winning states, and CheckWinningState() return false
 * If CheckWinningState() return false with the conditions above, then this test passes
 * */
@org.junit.Test

public void CheckWinningStateTest3() {
	Board b=new Board();
	b.GameStart();
	b.setCurrentTeam(1);
	b.setBlueAgentCount(6);
	b.setRedAgentCount(4);
	for(int i=0;i<b.getListofLocation().size();i++) {
	 if(b.getListofLocation().get(i).getPersonfromLocation().getIdentity().equals("InnocentBystander")) {
		 b.setLocationChosen(b.getListofLocation().get(i));
		 break;
	 }
	}
	b.WhichTeamWins();
	assertFalse(b.CheckWinningState());	
}


	
}
